// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Vizite
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ClientRelationships } from './ClientRelationships';
import {
    ClientRelationshipsFromJSON,
    ClientRelationshipsFromJSONTyped,
    ClientRelationshipsToJSON,
    ClientRelationshipsToJSONTyped,
} from './ClientRelationships';
import type { ClientAttributes } from './ClientAttributes';
import {
    ClientAttributesFromJSON,
    ClientAttributesFromJSONTyped,
    ClientAttributesToJSON,
    ClientAttributesToJSONTyped,
} from './ClientAttributes';

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    type?: string;
    /**
     * 
     * @type {ClientAttributes}
     * @memberof Client
     */
    attributes?: ClientAttributes;
    /**
     * 
     * @type {ClientRelationships}
     * @memberof Client
     */
    relationships?: ClientRelationships;
}

/**
 * Check if a given object implements the Client interface.
 */
export function instanceOfClient(value: object): value is Client {
    return true;
}

export function ClientFromJSON(json: any): Client {
    return ClientFromJSONTyped(json, false);
}

export function ClientFromJSONTyped(json: any, ignoreDiscriminator: boolean): Client {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'attributes': json['attributes'] == null ? undefined : ClientAttributesFromJSON(json['attributes']),
        'relationships': json['relationships'] == null ? undefined : ClientRelationshipsFromJSON(json['relationships']),
    };
}

export function ClientToJSON(json: any): Client {
    return ClientToJSONTyped(json, false);
}

export function ClientToJSONTyped(value?: Client | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'attributes': ClientAttributesToJSON(value['attributes']),
        'relationships': ClientRelationshipsToJSON(value['relationships']),
    };
}

