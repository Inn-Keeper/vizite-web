// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Vizite
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ClientsGet200Response,
  ApiV1ClientsGet403Response,
  ApiV1ClientsIdGet200Response,
  ApiV1ClientsPost201Response,
  ApiV1SignOutPost401Response,
  ValidationError,
} from '../models/index';
import {
    ApiV1ClientsGet200ResponseFromJSON,
    ApiV1ClientsGet200ResponseToJSON,
    ApiV1ClientsGet403ResponseFromJSON,
    ApiV1ClientsGet403ResponseToJSON,
    ApiV1ClientsIdGet200ResponseFromJSON,
    ApiV1ClientsIdGet200ResponseToJSON,
    ApiV1ClientsPost201ResponseFromJSON,
    ApiV1ClientsPost201ResponseToJSON,
    ApiV1SignOutPost401ResponseFromJSON,
    ApiV1SignOutPost401ResponseToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface ApiV1ClientsGetRequest {
    perPage?: number;
    page?: number;
    include?: string;
    filterName?: string;
    filterCityName?: string;
    filterCityStateName?: string;
}

export interface ApiV1ClientsIdDeleteRequest {
    id: string;
}

export interface ApiV1ClientsIdGetRequest {
    id: string;
    include?: string;
}

export interface ApiV1ClientsIdPatchRequest {
    id: string;
    name: string;
    cityId?: number;
    email?: string;
    phone?: string;
    document?: string;
    address?: string;
    number?: string;
    complement?: string;
    neighborhood?: string;
    zipCode?: string;
    coordinates?: string;
    status?: string;
    type?: string;
    picture?: Blob;
}

export interface ApiV1ClientsPostRequest {
    name: string;
    cityId?: number;
    email?: string;
    phone?: string;
    document?: string;
    address?: string;
    number?: string;
    complement?: string;
    neighborhood?: string;
    zipCode?: string;
    coordinates?: string;
    status?: string;
    type?: string;
    picture?: Blob;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     * List all clients
     */
    async apiV1ClientsGetRaw(requestParameters: ApiV1ClientsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['filterName'] != null) {
            queryParameters['filter[name]'] = requestParameters['filterName'];
        }

        if (requestParameters['filterCityName'] != null) {
            queryParameters['filter[city.name]'] = requestParameters['filterCityName'];
        }

        if (requestParameters['filterCityStateName'] != null) {
            queryParameters['filter[city.state.name]'] = requestParameters['filterCityStateName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List all clients
     */
    async apiV1ClientsGet(requestParameters: ApiV1ClientsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsGet200Response> {
        const response = await this.apiV1ClientsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a client
     */
    async apiV1ClientsIdDeleteRaw(requestParameters: ApiV1ClientsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1ClientsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a client
     */
    async apiV1ClientsIdDelete(requestParameters: ApiV1ClientsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ClientsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific client
     */
    async apiV1ClientsIdGetRaw(requestParameters: ApiV1ClientsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1ClientsIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific client
     */
    async apiV1ClientsIdGet(requestParameters: ApiV1ClientsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsIdGet200Response> {
        const response = await this.apiV1ClientsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a client
     */
    async apiV1ClientsIdPatchRaw(requestParameters: ApiV1ClientsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsPost201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1ClientsIdPatch().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiV1ClientsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['cityId'] != null) {
            formParams.append('city_id', requestParameters['cityId'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['email'] != null) {
            formParams.append('email', requestParameters['email'] as any);
        }

        if (requestParameters['phone'] != null) {
            formParams.append('phone', requestParameters['phone'] as any);
        }

        if (requestParameters['document'] != null) {
            formParams.append('document', requestParameters['document'] as any);
        }

        if (requestParameters['address'] != null) {
            formParams.append('address', requestParameters['address'] as any);
        }

        if (requestParameters['number'] != null) {
            formParams.append('number', requestParameters['number'] as any);
        }

        if (requestParameters['complement'] != null) {
            formParams.append('complement', requestParameters['complement'] as any);
        }

        if (requestParameters['neighborhood'] != null) {
            formParams.append('neighborhood', requestParameters['neighborhood'] as any);
        }

        if (requestParameters['zipCode'] != null) {
            formParams.append('zip_code', requestParameters['zipCode'] as any);
        }

        if (requestParameters['coordinates'] != null) {
            formParams.append('coordinates', requestParameters['coordinates'] as any);
        }

        if (requestParameters['status'] != null) {
            formParams.append('status', requestParameters['status'] as any);
        }

        if (requestParameters['type'] != null) {
            formParams.append('type', requestParameters['type'] as any);
        }

        if (requestParameters['picture'] != null) {
            formParams.append('picture', requestParameters['picture'] as any);
        }

        const response = await this.request({
            path: `/api/v1/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update a client
     */
    async apiV1ClientsIdPatch(requestParameters: ApiV1ClientsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsPost201Response> {
        const response = await this.apiV1ClientsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new client
     */
    async apiV1ClientsPostRaw(requestParameters: ApiV1ClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsPost201Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiV1ClientsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['cityId'] != null) {
            formParams.append('city_id', requestParameters['cityId'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['email'] != null) {
            formParams.append('email', requestParameters['email'] as any);
        }

        if (requestParameters['phone'] != null) {
            formParams.append('phone', requestParameters['phone'] as any);
        }

        if (requestParameters['document'] != null) {
            formParams.append('document', requestParameters['document'] as any);
        }

        if (requestParameters['address'] != null) {
            formParams.append('address', requestParameters['address'] as any);
        }

        if (requestParameters['number'] != null) {
            formParams.append('number', requestParameters['number'] as any);
        }

        if (requestParameters['complement'] != null) {
            formParams.append('complement', requestParameters['complement'] as any);
        }

        if (requestParameters['neighborhood'] != null) {
            formParams.append('neighborhood', requestParameters['neighborhood'] as any);
        }

        if (requestParameters['zipCode'] != null) {
            formParams.append('zip_code', requestParameters['zipCode'] as any);
        }

        if (requestParameters['coordinates'] != null) {
            formParams.append('coordinates', requestParameters['coordinates'] as any);
        }

        if (requestParameters['status'] != null) {
            formParams.append('status', requestParameters['status'] as any);
        }

        if (requestParameters['type'] != null) {
            formParams.append('type', requestParameters['type'] as any);
        }

        if (requestParameters['picture'] != null) {
            formParams.append('picture', requestParameters['picture'] as any);
        }

        const response = await this.request({
            path: `/api/v1/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new client
     */
    async apiV1ClientsPost(requestParameters: ApiV1ClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsPost201Response> {
        const response = await this.apiV1ClientsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
