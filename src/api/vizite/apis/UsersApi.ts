// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Vizite
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1SignOutPost401Response,
  ApiV1UsersIdGet200Response,
  ApiV1UsersIdGet404Response,
} from '../models/index';
import {
    ApiV1SignOutPost401ResponseFromJSON,
    ApiV1SignOutPost401ResponseToJSON,
    ApiV1UsersIdGet200ResponseFromJSON,
    ApiV1UsersIdGet200ResponseToJSON,
    ApiV1UsersIdGet404ResponseFromJSON,
    ApiV1UsersIdGet404ResponseToJSON,
} from '../models/index';

export interface ApiV1UsersIdGetRequest {
    id: number;
    include?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Fetch a user
     */
    async apiV1UsersIdGetRaw(requestParameters: ApiV1UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1UsersIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1UsersIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1UsersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a user
     */
    async apiV1UsersIdGet(requestParameters: ApiV1UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1UsersIdGet200Response> {
        const response = await this.apiV1UsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
