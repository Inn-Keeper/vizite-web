// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Vizite
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ClientsClientIdRegistriesGet200Response,
  ApiV1ClientsClientIdRegistriesPost200Response,
  Forbidden,
  NotFound,
  Unauthorized,
  ValidationError,
} from '../models/index';
import {
    ApiV1ClientsClientIdRegistriesGet200ResponseFromJSON,
    ApiV1ClientsClientIdRegistriesGet200ResponseToJSON,
    ApiV1ClientsClientIdRegistriesPost200ResponseFromJSON,
    ApiV1ClientsClientIdRegistriesPost200ResponseToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface ApiV1ClientsClientIdRegistriesGetRequest {
    clientId: string;
    include?: string;
    filterTitle?: string;
    filterDescription?: string;
    perPage?: number;
    page?: number;
}

export interface ApiV1ClientsClientIdRegistriesPostRequest {
    clientId: string;
    description: string;
    title?: string;
    attachment?: Blob;
}

export interface ApiV1ClientsClientIdRegistriesRegistryIdDeleteRequest {
    clientId: string;
    registryId: string;
}

export interface ApiV1ClientsClientIdRegistriesRegistryIdGetRequest {
    clientId: string;
    registryId: string;
    include?: string;
}

export interface ApiV1ClientsClientIdRegistriesRegistryIdPutRequest {
    clientId: string;
    registryId: string;
    title?: string;
    description?: string;
    attachment?: Blob;
}

/**
 * 
 */
export class ClientRegistriesApi extends runtime.BaseAPI {

    /**
     * Get all registries for a client
     */
    async apiV1ClientsClientIdRegistriesGetRaw(requestParameters: ApiV1ClientsClientIdRegistriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsClientIdRegistriesGet200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling apiV1ClientsClientIdRegistriesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['filterTitle'] != null) {
            queryParameters['filter[title]'] = requestParameters['filterTitle'];
        }

        if (requestParameters['filterDescription'] != null) {
            queryParameters['filter[description]'] = requestParameters['filterDescription'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients/{client_id}/registries`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsClientIdRegistriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all registries for a client
     */
    async apiV1ClientsClientIdRegistriesGet(requestParameters: ApiV1ClientsClientIdRegistriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsClientIdRegistriesGet200Response> {
        const response = await this.apiV1ClientsClientIdRegistriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new registry for a client
     */
    async apiV1ClientsClientIdRegistriesPostRaw(requestParameters: ApiV1ClientsClientIdRegistriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsClientIdRegistriesPost200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling apiV1ClientsClientIdRegistriesPost().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling apiV1ClientsClientIdRegistriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['attachment'] != null) {
            formParams.append('attachment', requestParameters['attachment'] as any);
        }

        const response = await this.request({
            path: `/api/v1/clients/{client_id}/registries`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsClientIdRegistriesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new registry for a client
     */
    async apiV1ClientsClientIdRegistriesPost(requestParameters: ApiV1ClientsClientIdRegistriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsClientIdRegistriesPost200Response> {
        const response = await this.apiV1ClientsClientIdRegistriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdDeleteRaw(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdDelete().'
            );
        }

        if (requestParameters['registryId'] == null) {
            throw new runtime.RequiredError(
                'registryId',
                'Required parameter "registryId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients/{client_id}/registries/{registry_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))).replace(`{${"registry_id"}}`, encodeURIComponent(String(requestParameters['registryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdDelete(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ClientsClientIdRegistriesRegistryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdGetRaw(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsClientIdRegistriesPost200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdGet().'
            );
        }

        if (requestParameters['registryId'] == null) {
            throw new runtime.RequiredError(
                'registryId',
                'Required parameter "registryId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/clients/{client_id}/registries/{registry_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))).replace(`{${"registry_id"}}`, encodeURIComponent(String(requestParameters['registryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsClientIdRegistriesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdGet(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsClientIdRegistriesPost200Response> {
        const response = await this.apiV1ClientsClientIdRegistriesRegistryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdPutRaw(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ClientsClientIdRegistriesPost200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdPut().'
            );
        }

        if (requestParameters['registryId'] == null) {
            throw new runtime.RequiredError(
                'registryId',
                'Required parameter "registryId" was null or undefined when calling apiV1ClientsClientIdRegistriesRegistryIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['attachment'] != null) {
            formParams.append('attachment', requestParameters['attachment'] as any);
        }

        const response = await this.request({
            path: `/api/v1/clients/{client_id}/registries/{registry_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))).replace(`{${"registry_id"}}`, encodeURIComponent(String(requestParameters['registryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClientsClientIdRegistriesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a client registry
     */
    async apiV1ClientsClientIdRegistriesRegistryIdPut(requestParameters: ApiV1ClientsClientIdRegistriesRegistryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ClientsClientIdRegistriesPost200Response> {
        const response = await this.apiV1ClientsClientIdRegistriesRegistryIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
